import sys
import traceback
import logging
from logging.handlers import TimedRotatingFileHandler
from functools import wraps
from flask.logging import default_handler


from server.extensions import socketio
from server.settings import Config

host = Config.HOSTNAME
fmt = "%(asctime)s.%(msecs)03d [%(levelname)-5.5s]  %(shortname)-30s  %(message)s  "


def dummy_log(f):
    """Decorate function f with a printout of all parameters with their
    values, and f's return value. Used for debugging and dummy hardware
    modules.
    """
    logger = logging.getLogger(f.__module__.split(".")[-1])
    # logger.setLevel(logging.DEBUG)

    @wraps(f)
    def wrapper(*args, **kwargs):
        logger.debug(
            "%s %s",
            f.__module__.split(".")[-1],
            {
                **dict(
                    (k, v) for k, v in zip(f.__code__.co_varnames, args) if k != "self"
                ),
                **kwargs,
            },
        )
        result = f(*args, **kwargs)
        # logger.debug("%s %s %s", f.__qualname__, "return:", result)
        return result

    return wrapper


def log_namer(default_filename):
    """Define how log files will be named. Keep extension at end."""
    parts = default_filename.split(".")
    return f"{parts[0]}.{parts[2]}.{parts[1]}"


class SocketIOHandler(logging.Handler):
    """A logging handler that emits records with SocketIO.

    Every record gets emitted and written to a message pane on the front
    end, except those generated by engineIO. If a record is warning
    level or higher, it also gets flashed to the frontend as a bootstrap
    alert.
    """

    def __init__(self):
        super().__init__()

    def emit(self, record):
        try:
            if record.shortname == "engineio" or record.shortname == "werkzeug":
                return  # skip alert flashing for anything from engineio
        except:
            pass
        try:
            msg = fmt % {
                "asctime": record.asctime.split(" ")[1],
                "msecs": record.msecs,
                "levelname": record.levelname,
                "shortname": record.shortname,
                "message": record.message,
            }
            socketio.emit(
                "update_message_box", msg, namespace="/printing"
            )
            msg = "%(asctime)s.%(msecs)03d   %(message)s  " % {
                "asctime": record.asctime.split(" ")[1],
                "msecs": record.msecs,
                "message": record.message,
            }
            if record.levelno > logging.INFO and record.levelno <= logging.WARNING:
                socketio.emit(
                    "bootstrap alert",
                    {"text": msg, "category": "warning"},
                    namespace="/printing",
                )
            elif record.levelno > logging.WARNING:
                socketio.emit(
                    "bootstrap alert",
                    {"text": msg, "category": "danger"},
                    namespace="/printing",
                )
        except AttributeError:
            pass


class LoggingNameFilter(logging.Filter):
    """Strip out only the last part of a name to use with a logger."""

    def filter(self, record):
        record.shortname = record.name.rsplit(".", 1)[-1]
        return True


def configure_loggers(app):
    """Configure the loggers that will be shared for the app."""

    app.logger.removeHandler(default_handler)
    root_logger = logging.getLogger()
    log = logging.getLogger('werkzeug').setLevel(logging.WARN)

    # root_logger.setLevel(logging.NOTSET)  # uncomment to see all mesasges everywhere

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.addFilter(LoggingNameFilter())
    console_handler.setFormatter(logging.Formatter(fmt, "%Y-%m-%d %H:%M:%S"))
    root_logger.addHandler(console_handler)

    log_file_handler = TimedRotatingFileHandler(f"logs/{host}_log.txt", when="midnight")
    log_file_handler.addFilter(LoggingNameFilter())
    log_file_handler.setFormatter(logging.Formatter(fmt, "%Y-%m-%d %H:%M:%S"))
    log_file_handler.namer = log_namer
    root_logger.addHandler(log_file_handler)

    flask_socketIO_handler = SocketIOHandler()
    root_logger.addHandler(flask_socketIO_handler)
    app.logger.addHandler(flask_socketIO_handler)
